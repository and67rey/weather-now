import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
import asyncio

from dotenv import load_dotenv

load_dotenv('.env')
API_TOKEN = os.getenv("API_TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

WEATHER_EMOJIS = {
    "—è—Å–Ω–æ": "‚òÄÔ∏è",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå§Ô∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "–¥–æ–∂–¥—å": "üåßÔ∏è",
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üå¶Ô∏è",
    "–ª–∏–≤–µ–Ω—å": "üåßÔ∏è",
    "–≥—Ä–æ–∑–∞": "‚õàÔ∏è",
    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
    "—Ç—É–º–∞–Ω": "üå´Ô∏è",
    "–º–æ—Ä–æ—Å—å": "üåßÔ∏è",
}

def get_weather_emoji(description: str) -> str:
    for key in WEATHER_EMOJIS:
        if key in description.lower():
            return WEATHER_EMOJIS[key]
    return "üå°Ô∏è"

async def get_weather(city: str) -> str:
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                weather_description = data['weather'][0]['description']
                emoji = get_weather_emoji(weather_description)
                temp = data['main']['temp']
                feels_like = data['main']['feels_like']
                humidity = data['main']['humidity']
                wind_speed = data['wind']['speed']
                return (f"<b>–ü–æ–≥–æ–¥–∞ –≤ {city}:</b>\n"
                        f"{emoji} {weather_description.capitalize()}\n"
                        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <i>{temp}¬∞C</i> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å")
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞."

async def get_forecast(city: str) -> str:
    geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
    async with aiohttp.ClientSession() as session:
        async with session.get(geo_url) as geo_resp:
            if geo_resp.status != 200:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞."
            geo_data = await geo_resp.json()
            if not geo_data:
                return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            lat = geo_data[0]['lat']
            lon = geo_data[0]['lon']

        forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&units=metric&lang=ru&appid={OPENWEATHER_API_KEY}"
        async with session.get(forecast_url) as forecast_resp:
            if forecast_resp.status != 200:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑."
            data = await forecast_resp.json()

            result = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city.title()} –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è:</b>\n"
            days_collected = set()

            for entry in data['list']:
                date = entry['dt_txt'].split(" ")[0]
                if date not in days_collected:
                    weather = entry['weather'][0]['description']
                    emoji = get_weather_emoji(weather)
                    temp = entry['main']['temp']
                    result += f"<b>{date}</b>: {emoji} {weather.capitalize()}, <i>{temp}¬∞C</i>\n"
                    days_collected.add(date)
                if len(days_collected) >= 3:
                    break
            return result

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç.\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞.\n–î–æ–±–∞–≤—å —Å–ª–æ–≤–æ '–ø—Ä–æ–≥–Ω–æ–∑', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 3 –¥–Ω—è. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ - –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ '–ø—Ä–æ–≥–Ω–æ–∑' - –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")

@dp.message()
async def handle_message(message: Message):
    city = message.text.strip()
    if city.lower().endswith("–ø—Ä–æ–≥–Ω–æ–∑"):
        city_name = city.lower().replace("–ø—Ä–æ–≥–Ω–æ–∑", "").strip()
        weather_info = await get_forecast(city_name)
    else:
        weather_info = await get_weather(city)
    await message.answer(weather_info, parse_mode=ParseMode.HTML)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())